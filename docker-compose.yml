services:
  traefik:
# =======================================
# Traefik
# =======================================
    image: traefik:latest
    container_name: traefik
    ports:
      - "80:80"
      - "443:443"
#      - "8082:8082"  # prometheus metrics
    volumes:
#      - ${XDG_RUNTIME_DIR}/docker.sock:/var/run/docker.sock:ro
      - /run/user/1000/docker.sock:/var/run/docker.sock:ro
#      - ./traefik/acme.json:/acme.json
      - ./traefik/traefik.yml:/etc/traefik/traefik.yml:ro
      - ./traefik/acme.json:/etc/traefik/acme.json
      - ./traefik/dynamic:/etc/traefik/dynamic:ro
      - ./prometheus/prometheus.yml:/etc/prometheus/prometheus.yml:ro
    labels:
      - traefik.enable=true
      - traefik.http.routers.traefik-dashboard.rule=Host(`${TRAEFIK_DOMAIN}`)
#      - traefik.http.routers.traefik-dashboard.rule=Host(`traf.octopod.eu`)
      - traefik.http.routers.traefik-dashboard.entrypoints=websecure
      - traefik.http.routers.traefik-dashboard.tls.certresolver=letsencrypt
      - traefik.http.routers.traefik-dashboard.service=api@internal
      - traefik.http.routers.traefik-dashboard.middlewares=authentik-forwardauth@file
    restart: unless-stopped
    networks:
      - proxy_net



#  init_prometheus:
#    image: prom/prometheus:latest
#    user: root
#    entrypoint:
#      - /bin/sh
#      - -c
#      - |
#      - chown -R 65534:65534 /prometheus
#    volumes:
#      - ./prometheus-data/:/prometheus

# =======================================
# Pometheus
# =======================================
  prometheus:
    image: prom/prometheus:latest
    container_name: prometheus
#    user: "1000:1000"
    user: "root"
    volumes:
      - /run/user/1000/docker.sock:/var/run/docker.sock:ro
      - ./prometheus-data:/prometheus:z
#      - ./prometheus/:/etc/prometheus/
      - ./prometheus/prometheus.yml:/etc/prometheus/prometheus.yml:z
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--storage.tsdb.retention.size=256MB'
    ports:
      - 9090:9090
#    labels:
#      - "traefik.http.routers.prometheus.rule=Host(`prom.octopod.eu`)"
#      - "traefik.http.routers.prometheus.service=prometheus"
#      - "traefik.http.routers.prometheus.middlewares=traefik-auth"
#      - "traefik.http.services.prometheus.loadbalancer.server.port=9090"
    logging:
      options:
        max-size: "10m"
        max-file: "3"
#    depends_on:
#      - init_prometheus 
    restart: unless-stopped
    networks:
      - proxy_net


# =======================================
# Grafana
# =======================================
  grafana:
    image: grafana/grafana-oss:latest
    container_name: grafana
    environment:
      - GF_PATHS_PLUGINS=${GF_PATHS_PLUGINS}
      - GF_SERVER_HTTP_PORT=${GF_SERVER_HTTP_PORT}
    #   - GF_INSTALL_PLUGINS=${GF_INSTALL_PLUGINS}
    volumes:
      - ./grafana/plugins:/var/lib/grafana/plugins
      - grafana-data:/var/lib/grafana

#      - ./grafana-data:/var/lib/grafana:rw
 #     - ./grafana/plugins:/var/lib/grafana/plugins
    labels:
      - traefik.enable=true
      - traefik.http.routers.grafana.rule=Host(`${GRAFANA_DOMAIN}`)
#      - traefik.http.routers.grafana.rule=Host(`graf.octopod.eu`)
      - traefik.http.routers.grafana.entrypoints=websecure
      - traefik.http.routers.grafana.tls.certresolver=letsencrypt
      - traefik.http.services.grafana.loadbalancer.server.port=${GF_SERVER_HTTP_PORT}
      - traefik.http.routers.grafana.middlewares=authentik-forwardauth@file
    ports:
      - "3001:3000"
    restart: unless-stopped
    networks:
      - proxy_net



# =======================================
# Authelia
# =======================================
  authelia:
    image: authelia/authelia:latest
    container_name: authelia
    volumes:
      - ./authelia/configuration.yml:/config/configuration.yml:ro
      - ./authelia/users_database.yml:/config/users_database.yml:ro
      - authelia-data:/config/data
    environment:
      - AUTHELIA_JWT_SECRET=${AUTHELIA_JWT_SECRET}
      - AUTHELIA_SESSION_SECRET=${AUTHELIA_SESSION_SECRET}
      - AUTHELIA_STORAGE_ENCRYPTION_KEY=${AUTHELIA_STORAGE_KEY}
    depends_on:
      - redis
    labels:
      - traefik.enable=true
      - traefik.http.routers.authelia.rule=Host(`authl.octopod.eu`)
      - traefik.http.routers.authelia.entrypoints=websecure
      - traefik.http.routers.authelia.tls.certresolver=letsencrypt
      - traefik.http.services.authelia.loadbalancer.server.port=9091
      - traefik.http.middlewares.authelia.forwardauth.address=http://authelia:9091/api/verify?rd=https://authl.octopod.eu/
      - traefik.http.middlewares.authelia.forwardauth.trustForwardHeader=true
      - traefik.http.middlewares.authelia.forwardauth.authResponseHeaders=Remote-User,Remote-Groups,Remote-Name,Remote-Email
    restart: unless-stopped
    networks:
      - proxy_net

# =======================================
# Redis
# =======================================
  redis:
    image: redis:alpine
    container_name: authentik-redis
    restart: unless-stopped
    networks:
      - proxy_net
    volumes:
      - ./redis-data:/data


# =======================================
# Dashy
# =======================================
  dashy:
    image: lissy93/dashy:latest
    container_name: dashy
    volumes:
      - ./dashy/conf.yml:/app/user-data/conf.yml
#      - ./dashy:/app/public/item-icons:ro
#      - ./dashy/conf.yml:/conf.yml:rw
#    environment:
      # Принуждаваме Dashy да използва нашия конфигурационен файл
#      - DASHY_CONFIG_PATH=/app/public/conf.yml
    labels:
      - traefik.enable=true
      - traefik.http.routers.dashy.rule=Host(`dash.octopod.eu`)
      - traefik.http.routers.dashy.entrypoints=websecure
      - traefik.http.routers.dashy.tls.certresolver=letsencrypt
      - traefik.http.routers.dashy.middlewares=authelia@docker
      - traefik.http.services.dashy.loadbalancer.server.port=8080
    restart: unless-stopped
    networks:
      - proxy_net


# =======================================
# Fenrus Dashboard
# =======================================
  fenrus:
    image: revenz/fenrus:latest
    container_name: fenrus
    volumes:
      - ./fenrus-data:/app/data
    environment:
      - FENRUS_OIDC_AUTH_URL=https://auth.octopod.eu/application/o/fenrus/authorize/
      - FENRUS_OIDC_TOKEN_URL=https://auth.octopod.eu/application/o/fenrus/token/
      - FENRUS_OIDC_CLIENT_ID=fenrus
      - FENRUS_OIDC_CLIENT_SECRET=${FENRUS_OIDC_CLIENT_SECRET}
      - FENRUS_OIDC_SCOPE=openid profile email
      - FENRUS_OIDC_LOGOUT_URL=https://auth.octopod.eu/application/o/fenrus/logout/
    labels:
      - traefik.enable=true
      - traefik.http.routers.fenrus.rule=Host(`${FENRUS_DOMAIN}`)
#      - traefik.http.routers.fenrus.rule=Host(`fenrus.octopod.eu`)
      - traefik.http.routers.fenrus.entrypoints=websecure
      - traefik.http.routers.fenrus.tls.certresolver=letsencrypt
      - traefik.http.services.fenrus.loadbalancer.server.port=3000
      - traefik.http.routers.fenrus.middlewares=authentik-forwardauth@file
    ports:
      - "3000:3000"
    restart: unless-stopped
    networks:
      - proxy_net

# =======================================
# Authentik SSO
# =======================================
  authentik-server:
    image: ghcr.io/goauthentik/server:latest
    container_name: authentik-server
    command: server
#    user: "root"
    environment:
      AUTHENTIK_SECRET_KEY: "${AUTHENTIK_SECRET_KEY}"
      AUTHENTIK_POSTGRESQL__HOST: authentik-db
      AUTHENTIK_POSTGRESQL__USER: authentik
      AUTHENTIK_POSTGRESQL__PASSWORD: "${AUTHENTIK_DB_PASSWORD}"
      AUTHENTIK_POSTGRESQL__DATABASE: authentik
      AUTHENTIK_ERRPOR_REPORTING__ENABLED: true
      # Email settings
      AUTHENTIK_EMAIL__HOST: "${AUTHENTIK_EMAIL__HOST}"
      AUTHENTIK_EMAIL__PORT: "${AUTHENTIK_EMAIL__PORT}"
      AUTHENTIK_EMAIL__USERNAME: "${AUTHENTIK_EMAIL__USERNAME}"
      AUTHENTIK_EMAIL__PASSWORD: "${AUTHENTIK_EMAIL__PASSWORD}"
      AUTHENTIK_EMAIL__FROM: "${AUTHENTIK_EMAIL__FROM}"
      AUTHENTIK_EMAIL__USE_TLS: true
      # Use SSL
      #AUTHENTIK_EMAIL__USE_SSL: false
      AUTHENTIK_EMAIL__TIMEOUT: 10
      AUTHENTIK_REDIS__HOST: redis
      AUTHENTIK_REDIS__PORT: 6379


#      AUTHENTIK_BOOTSTRAP_PASSWORD: "${AUTHENTIK_DB_PASSWORD}"
      # Configure the default password for the akadmin user. Only read on the first startup. Can be used for any flow executor.
#      AUTHENTIK_BOOTSTRAP_TOKEN: "${AUTHENTIK_BOOTSTRAP_TOKEN}"
      # Create a token for the default akadmin user. Only read on the first startup. The string you specify for this variable
      # is the token key you can use to authenticate yourself to the API.
      # echo "FENRUS_OIDC_CLIENT_SECRET=$(openssl rand -base64 60 | tr -d '\n')" >> .env
#      AUTHENTIK_BOOTSTRAP_EMAIL: "${AUTHENTIK_EMAIL__FROM}"
#      AUTHENTIK_BOOTSTRAP_PASSWORD: "${AUTHENTIK_BOOTSTRAP_ADMIN_PASSWORD}"
#      AUTHENTIK_BOOTSTRAP_TOKEN: "${AUTHENTIK_BOOTSTRAP_TOKEN}"
#      AUTHENTIK_BOOTSTRAP_EMAIL: "${AUTHENTIK_BOOTSTRAP_EMAIL}"
    volumes:
      - ./authentik-data:/database:z
      - ./authentik-media:/media:z
      - ./authentik/certs:/certs
      - ./authentik/custom-templates:/templates:z
    labels:
      - traefik.enable=true
      - traefik.http.routers.authentik.rule=Host(`${AUTHENTIK_DOMAIN}`)
#      - traefik.http.routers.authentik.rule=Host(`auth.octopod.eu`)
      - traefik.http.routers.authentik.entrypoints=websecure
      - traefik.http.routers.authentik.tls.certresolver=letsencrypt
      - traefik.http.services.authentik.loadbalancer.server.port=9000
    depends_on:
      - authentik-db
      - redis
    ports:
      - "9100:9000"
    restart: unless-stopped
    networks:
      - proxy_net


# =======================================
# Authentik DB - Postgres
# =======================================
  authentik-db:
    image: postgres:15
    container_name: authentik-db
#    user: "1000:1000"
    environment:
      POSTGRES_USER: authentik
      POSTGRES_PASSWORD: "${AUTHENTIK_DB_PASSWORD}"
      POSTGRES_DB: authentik
    volumes:
      - ./authentik-db:/var/lib/postgresql/data
#      - /var/run/1000/docker.sock:/var/run/docker.sock
      - ./authentik-data:/database
      - ./authentik-media:/media
    restart: unless-stopped
    networks:
      - proxy_net

# =======================================
# Authentik Worker
# =======================================
  authentik-worker:
    image: ghcr.io/goauthentik/server:latest
    container_name: authentik-worker
    command: worker
#    user: "root"
    environment:
      AUTHENTIK_SECRET_KEY: "${AUTHENTIK_SECRET_KEY}"
      AUTHENTIK_POSTGRESQL__HOST: authentik-db
      AUTHENTIK_POSTGRESQL__USER: authentik
      AUTHENTIK_POSTGRESQL__PASSWORD: "${AUTHENTIK_DB_PASSWORD}"
      AUTHENTIK_POSTGRESQL__DATABASE: authentik
      AUTHENTIK_ERRPOR_REPORTING__ENABLED: true
      # Email settings
      AUTHENTIK_EMAIL__HOST: "${AUTHENTIK_EMAIL__HOST}"
      AUTHENTIK_EMAIL__PORT: "${AUTHENTIK_EMAIL__PORT}"
      AUTHENTIK_EMAIL__USERNAME: "${AUTHENTIK_EMAIL__USERNAME}"
      AUTHENTIK_EMAIL__PASSWORD: "${AUTHENTIK_EMAIL__PASSWORD}"
      AUTHENTIK_EMAIL__FROM: "${AUTHENTIK_EMAIL__FROM}"
      AUTHENTIK_EMAIL__USE_TLS: true
      # Use SSL
      #AUTHENTIK_EMAIL__USE_SSL: false
      AUTHENTIK_EMAIL__TIMEOUT: 10
      AUTHENTIK_REDIS__HOST: redis
      AUTHENTIK_REDIS__PORT: 6379
    volumes:
      - /var/run/1000/docker.sock:/var/run/docker.sock
      - ./authentik-data:/database:z
      - ./authentik-media:/media:z
      - ./authentik/certs:/certs
      - ./authentik/custom-templates:/templates:z

    depends_on:
      - authentik-db
      - redis
    restart: unless-stopped
    networks:
      - proxy_net


# =======================================
# Authentik Proxy
# =======================================
#  authentik-proxy:
#    image: ghcr.io/goauthentik/proxy
#    ports:
#      - 9000:9000
#      - 9443:9443
#    environment:
#      AUTHENTIK_HOST: https://your-authentik.tld
#      AUTHENTIK_INSECURE: "false"
#      AUTHENTIK_TOKEN: token-generated-by-authentik
#      # Starting with 2021.9, you can optionally set this too
#      # when authentik_host for internal communication doesn't match the public URL
#      # AUTHENTIK_HOST_BROWSER: https://external-domain.tld
#    labels:
#      traefik.enable: true
#      traefik.port: 9000
#      traefik.http.routers.authentik.rule: Host(`app.company`) && PathPrefix(`/outpost.goauthentik.io/`)
#      # `authentik-proxy` refers to the service name in the compose file.
#      traefik.http.middlewares.authentik.forwardauth.address: http://authentik-proxy:9000/outpost.goauthentik.io/auth/traefik
#      traefik.http.middlewares.authentik.forwardauth.trustForwardHeader: true
#      traefik.http.middlewares.authentik.forwardauth.authResponseHeaders: X-authentik-username,X-authentik-groups,X-authentik-entitlements,X-authentik-email,X-authentik-name,X-authentik-uid,X-authentik-jwt,X-authentik-meta-jwks,X-authentik-meta-outpost,X-authentik-meta-provider,X-authentik-meta-app,X-authentik-meta-version
#    restart: unless-stopped



# =======================================
# Ping healthcheck service (optional, can be a simple busybox container that pings 10.10.30.1)
# =======================================
#  pingcheck:
#    image: busybox
#    container_name: pingcheck
#    command: /bin/sh -c "while true; do ping -c1 10.10.30.1 >/dev/null 2>&1 && echo ok || echo nok; sleep 30; done"
#    networks:
#      - internal
#    restart: unless-stopped

# =======================================
# Volumes
# =======================================
volumes:
  redis-data:
  authelia-data:
  prometheus-data:
  grafana-data:


# =======================================
# Networks
## =======================================
networks:
  proxy_net:
    name: proxy_net
